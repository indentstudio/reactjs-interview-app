{"ast":null,"code":"var _jsxFileName = \"C:\\\\work\\\\ToDoList\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport AddTask from \"./components/add-task/AddTask\";\nimport TasksList from \"./components/TasksList/TasksList\";\nimport TodayTasks from \"./components/TodayTasks/TodayTasks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [tasksList, setTasksList] = useState([]);\n\n  const addTaskHandler = (title, description, date, isPriority, isCompleted) => {\n    const current = new Date();\n    let curDate = `${current.getFullYear()}-${current.getMonth() + 1}-0${current.getDate()}`; // console.log(title, description, date);\n\n    if (description.trim().length === 0) {\n      description = \"No description\";\n    }\n\n    setTasksList(prevTasksList => {\n      return [...prevTasksList, {\n        title,\n        description,\n        date,\n        isPriority,\n        isCompleted,\n        id: Math.random().toString()\n      }];\n    }); // console.log(tasksList);\n  };\n\n  const deleteTaskHandler = key => {\n    const updatedTasksList = tasksList.filter(current => current.id !== key);\n    setTasksList(updatedTasksList);\n  };\n\n  const changeTaskStatusHandler = key => {\n    const updatedTasksList = tasksList.map(current => {\n      if (current.id === key) {\n        if (current.isCompleted === false) {\n          current.isCompleted = true;\n        } else if (current.isCompleted === true) {\n          current.isCompleted = false;\n        }\n\n        return current;\n      }\n\n      return current;\n    });\n    setTasksList(updatedTasksList);\n  };\n\n  const sortingTasksHandler = isSortingUp => {\n    console.log(isSortingUp);\n\n    if (isSortingUp) {\n      tasksList.sort(function (a, b) {\n        return new Date(b.date) - new Date(a.date);\n      });\n    } else {\n      tasksList.sort(function (a, b) {\n        return new Date(a.date) - new Date(b.date);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(AddTask, {\n      onAddTask: addTaskHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TasksList, {\n      tasks: tasksList,\n      onDeleteTask: deleteTaskHandler,\n      onStatusTask: changeTaskStatusHandler,\n      onSortingTasks: sortingTasksHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodayTasks, {\n      tasks: tasksList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"XTk/mt5bo27g4xo059xSSQXstiU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","AddTask","TasksList","TodayTasks","App","tasksList","setTasksList","addTaskHandler","title","description","date","isPriority","isCompleted","current","Date","curDate","getFullYear","getMonth","getDate","trim","length","prevTasksList","id","Math","random","toString","deleteTaskHandler","key","updatedTasksList","filter","changeTaskStatusHandler","map","sortingTasksHandler","isSortingUp","console","log","sort","a","b"],"sources":["C:/work/ToDoList/src/App.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport AddTask from \"./components/add-task/AddTask\";\r\nimport TasksList from \"./components/TasksList/TasksList\";\r\nimport TodayTasks from \"./components/TodayTasks/TodayTasks\";\r\n\r\nfunction App() {\r\n  const [tasksList, setTasksList] = useState([]);\r\n\r\n  const addTaskHandler = (\r\n    title,\r\n    description,\r\n    date,\r\n    isPriority,\r\n    isCompleted\r\n  ) => {\r\n    const current = new Date();\r\n\r\n    let curDate = `${current.getFullYear()}-${\r\n      current.getMonth() + 1\r\n    }-0${current.getDate()}`;\r\n\r\n    // console.log(title, description, date);\r\n    if (description.trim().length === 0) {\r\n      description = \"No description\";\r\n    }\r\n\r\n    setTasksList((prevTasksList) => {\r\n      return [\r\n        ...prevTasksList,\r\n        {\r\n          title,\r\n          description,\r\n          date,\r\n          isPriority,\r\n          isCompleted,\r\n          id: Math.random().toString(),\r\n        },\r\n      ];\r\n    });\r\n    // console.log(tasksList);\r\n  };\r\n\r\n  const deleteTaskHandler = (key) => {\r\n    const updatedTasksList = tasksList.filter((current) => current.id !== key);\r\n    setTasksList(updatedTasksList);\r\n  };\r\n\r\n  const changeTaskStatusHandler = (key) => {\r\n    const updatedTasksList = tasksList.map((current) => {\r\n      if (current.id === key) {\r\n        if (current.isCompleted === false) {\r\n          current.isCompleted = true;\r\n        } else if (current.isCompleted === true) {\r\n          current.isCompleted = false;\r\n        }\r\n        return current;\r\n      }\r\n      return current;\r\n    });\r\n    setTasksList(updatedTasksList);\r\n  };\r\n\r\n  const sortingTasksHandler = (isSortingUp) => {\r\n    console.log(isSortingUp);\r\n    if (isSortingUp) {\r\n      tasksList.sort(function (a, b) {\r\n        return new Date(b.date) - new Date(a.date);\r\n      });\r\n    } else {\r\n      tasksList.sort(function (a, b) {\r\n        return new Date(a.date) - new Date(b.date);\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <AddTask onAddTask={addTaskHandler} />\r\n      <TasksList\r\n        tasks={tasksList}\r\n        onDeleteTask={deleteTaskHandler}\r\n        onStatusTask={changeTaskStatusHandler}\r\n        onSortingTasks={sortingTasksHandler}\r\n      />\r\n      <TodayTasks tasks={tasksList} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}